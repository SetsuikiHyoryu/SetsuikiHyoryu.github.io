import{_ as a,c as e,o as s,a3 as i}from"./chunks/framework.Cbi_dvob.js";const g=JSON.parse('{"title":"自定义 Git Bash 命令行提示符（Prompt）","description":"","frontmatter":{},"headers":[],"relativePath":"zh/programming/coding-memo/custom-git-bash-prompt.md","filePath":"zh/programming/coding-memo/custom-git-bash-prompt.md","lastUpdated":1728955305000}'),t={name:"zh/programming/coding-memo/custom-git-bash-prompt.md"},o=i('<h1 id="自定义-git-bash-命令行提示符-prompt" tabindex="-1">自定义 Git Bash 命令行提示符（Prompt） <a class="header-anchor" href="#自定义-git-bash-命令行提示符-prompt" aria-label="Permalink to &quot;自定义 Git Bash 命令行提示符（Prompt）&quot;">​</a></h1><p>※ 本文是基于 Windows 系统的，其他系统中本文所提及的文件的位置可能不一样。</p><h2 id="相关文档" tabindex="-1">相关文档 <a class="header-anchor" href="#相关文档" aria-label="Permalink to &quot;相关文档&quot;">​</a></h2><ul><li>Bash Shell 官方文档：<a href="https://www.gnu.org/software/bash/manual/bash.html" target="_blank" rel="noreferrer">Bash Reference Manual</a></li><li>命令行提示符中显示 Git 信息（文中的函数调用语法已过时，正确语法见下文「注意点」章节）：<a href="https://git-scm.com/book/zh/v2/%E9%99%84%E5%BD%95-A%3A-%E5%9C%A8%E5%85%B6%E5%AE%83%E7%8E%AF%E5%A2%83%E4%B8%AD%E4%BD%BF%E7%94%A8-Git-Bash-%E4%B8%AD%E7%9A%84-Git" target="_blank" rel="noreferrer">A1.7 附录 A: 在其它环境中使用 Git - Bash 中的 Git</a></li></ul><h2 id="操作流程" tabindex="-1">操作流程 <a class="header-anchor" href="#操作流程" aria-label="Permalink to &quot;操作流程&quot;">​</a></h2><ol><li><p>在 Git 的安装目录下使用 <code>prompt</code> 关键字搜索找到默认的命令行提示符配置文件。</p><ul><li><code>&lt;git-root&gt;\\etc\\profile.d\\git-prompt.sh</code>（具有可直接参考命令行提示符写法的代码和说明它的注释）。</li><li><code>&lt;git-root&gt;mingw64\\share\\git\\completion\\git-prompt.sh</code>（具有 Git 信息显示内容的常量配置的相关说明）。</li></ul></li><li><p>在用户目录 <code>C:\\Users\\&lt;Username&gt;</code> 下创建 Bash shell 的配置文件 <code>.bashrc</code>，参考第一步中找出的文件自定义命令行提示符。</p><ul><li>在命令行提示符中显示 Git 信息需要导入 <code>&lt;git-root&gt;mingw64\\share\\git\\completion\\git-prompt.sh</code> 与 <code>&lt;git-root&gt;mingw64\\share\\git\\completion\\git-completion.sh</code>，并调用其中的 <code>__git_ps1</code> 函数（正确调用语法见下文「注意点」章节）。</li></ul></li></ol><h2 id="注意点" tabindex="-1">注意点 <a class="header-anchor" href="#注意点" aria-label="Permalink to &quot;注意点&quot;">​</a></h2><p>命令行提示符最终由 <code>PS1</code> 的形状决定，并通过 <code>MSYS2_PS1=&quot;$PS1&quot;</code> 赋值语句生效。</p><h3 id="赋值" tabindex="-1">赋值 <a class="header-anchor" href="#赋值" aria-label="Permalink to &quot;赋值&quot;">​</a></h3><p>赋值符号 &#39;=&#39; 左右不可有空格，有了会报错。</p><h3 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h3><p><code>&quot;&quot;</code> 内可使用模版字符串，被 <code>$</code> 标记的文字被视为变量名，没有被标记的被视为普通文字。<code>&#39;&#39;</code> 内不可使用模版字符串。字符串拼接通过两个字符直接排列在一起实现。</p><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h3><h4 id="定义语法" tabindex="-1">定义语法 <a class="header-anchor" href="#定义语法" aria-label="Permalink to &quot;定义语法&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">function_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>如果要在配置文件中拿到函数的运算结果，不可使用 <code>return</code> 而到使用 <code>echo</code>。</li><li>函数参数不是在括号中定义，而是直接在函数体内使用 <code>$1</code>、<code>$2</code> 等占位符。</li></ul><h4 id="调用语法" tabindex="-1">调用语法 <a class="header-anchor" href="#调用语法" aria-label="Permalink to &quot;调用语法&quot;">​</a></h4><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 字符串外</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">green</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set_text_color</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;32&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 字符串内</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># `&quot;&quot;` 内为传入的参数，此处的 `[]` 是要显示的普通文字。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PS1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;`__git_ps1 &quot;[%s]&quot;`\\n&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="样式" tabindex="-1">样式 <a class="header-anchor" href="#样式" aria-label="Permalink to &quot;样式&quot;">​</a></h3><ul><li>样式由 <code>&#39;\\[\\033[32m\\]&#39;</code> 这个格式的字符串来控制。</li><li><code>\\033</code> 与 <code>\\e</code> (escape) 同义。</li><li><code>32</code> 为 ASNI 颜色编号。</li><li>默认仅可使用少量颜色，采用 256 色的语法 <code>&quot;\\[\\e[38;5;32m\\]&quot;</code>，<code>38</code> 意为前景，<code>5</code> 意为使用 256 色。</li><li>这个问答 「<a href="https://unix.stackexchange.com/questions/124407/what-color-codes-can-i-use-in-my-bash-ps1-prompt" target="_blank" rel="noreferrer">What color codes can I use in my Bash PS1 prompt?</a>」可查看颜色编号。</li></ul>',20),l=[o];function n(r,h,c,p,d,m){return s(),e("div",null,l)}const b=a(t,[["render",n]]);export{g as __pageData,b as default};
