import{_ as s,c as a,o as i,a3 as n}from"./chunks/framework.Cbi_dvob.js";const u=JSON.parse('{"title":"コマンドラインで C# を単体テスト（xUnit）","description":"","frontmatter":{},"headers":[],"relativePath":"ja/programming/language/c-sharp/c-sharp_unit-test_command-line.md","filePath":"ja/programming/language/c-sharp/c-sharp_unit-test_command-line.md","lastUpdated":1727732805000}'),e={name:"ja/programming/language/c-sharp/c-sharp_unit-test_command-line.md"},t=n(`<h1 id="コマンドラインで-c-を単体テスト-xunit" tabindex="-1">コマンドラインで C# を単体テスト（xUnit） <a class="header-anchor" href="#コマンドラインで-c-を単体テスト-xunit" aria-label="Permalink to &quot;コマンドラインで C\\# を単体テスト（xUnit）&quot;">​</a></h1><p>xUnit 単体テスト公式ドキュメント：<a href="https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-with-dotnet-test" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-with-dotnet-test</a></p><h2 id="既存の-solution-でテストプロジェクトを作成" tabindex="-1">既存の solution でテストプロジェクトを作成 <a class="header-anchor" href="#既存の-solution-でテストプロジェクトを作成" aria-label="Permalink to &quot;既存の solution でテストプロジェクトを作成&quot;">​</a></h2><p>※ 0 から solution を作成する場合は<a href="https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-with-dotnet-test#create-the-solution" target="_blank" rel="noreferrer">公式ドキュメント</a> を参照してください<br> ※ 既存のプロジェクトであれば通常は作成済みのテストプロジェクトが存在する</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># -o|--output &lt;OUTPUT_DIRECTORY&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 作成内容の出力箇所、デフォルトは現在のフォルダ</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xunit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --output</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> PrimeService.Tests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>単体テストプロジェクトを含んでいる solution の例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/unit-testing-using-dotnet-test</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    unit-testing-using-dotnet-test.sln</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    /PrimeService</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PrimeService.cs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PrimeService.csproj</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    /PrimeService.Tests</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PrimeService_IsPrimeShould.cs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        PrimeServiceTests.csproj</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="テストを作成" tabindex="-1">テストを作成 <a class="header-anchor" href="#テストを作成" aria-label="Permalink to &quot;テストを作成&quot;">​</a></h2><p>公式ドキュメント: <a href="https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-with-dotnet-test#create-a-test" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-with-dotnet-test#create-a-test</a></p><p>※ 通常はプロジェクト内の既存テストを模倣して書く</p><h2 id="テストを実行" tabindex="-1">テストを実行 <a class="header-anchor" href="#テストを実行" aria-label="Permalink to &quot;テストを実行&quot;">​</a></h2><p><code>.csproj</code> のあるディレクトリで下記命令を実行：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>※ これはテストプロジェクト内の全てのテストを実行する</p><h3 id="選択した単体テストの実行" tabindex="-1">選択した単体テストの実行 <a class="header-anchor" href="#選択した単体テストの実行" aria-label="Permalink to &quot;選択した単体テストの実行&quot;">​</a></h3><p>公式ドキュメント：<a href="https://docs.microsoft.com/ja/dotnet/core/testing/selective-unit-tests?pivots=xunit" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/testing/selective-unit-tests?pivots=xunit</a></p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Propert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y&gt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Operato</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">r&gt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Valu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Expression</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>指定するテストファイルを実行する例：</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --filter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">NamseSpac</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ClassNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="コマンドラインで出力を捕捉" tabindex="-1">コマンドラインで出力を捕捉 <a class="header-anchor" href="#コマンドラインで出力を捕捉" aria-label="Permalink to &quot;コマンドラインで出力を捕捉&quot;">​</a></h2><p>公式ドキュメント：<a href="https://xunit.net/docs/capturing-output" target="_blank" rel="noreferrer">https://xunit.net/docs/capturing-output</a></p><div class="language-c# vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Xunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Xunit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Abstractions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTestClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ITestOutputHelper インスタンスを作成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ITestOutputHelper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ITestOutputHelper インスタンスを代入</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTestClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ITestOutputHelper</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> output</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 代入されたインスタンスをクラス内のインスタンスに代入 </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> temp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my class!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 输出内容在执行 \`dotnet test\` 后的表示内容中显示</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is output from {0}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, temp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --logger</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;console;verbosity=detailed&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="reportgenerator-でカバレッジを確認" tabindex="-1">ReportGenerator でカバレッジを確認 <a class="header-anchor" href="#reportgenerator-でカバレッジを確認" aria-label="Permalink to &quot;ReportGenerator でカバレッジを確認&quot;">​</a></h2><ul><li>.NET HP：<a href="https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-code-coverage?tabs=windows#generate-reports" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/testing/unit-testing-code-coverage?tabs=windows#generate-reports</a></li><li>ReportGenerator 公式倉庫：<a href="https://github.com/danielpalme/ReportGenerator" target="_blank" rel="noreferrer">https://github.com/danielpalme/ReportGenerator</a></li></ul><h3 id="datacollectors-で-xml-ファイルを作成" tabindex="-1">DataCollectors で xml ファイルを作成 <a class="header-anchor" href="#datacollectors-で-xml-ファイルを作成" aria-label="Permalink to &quot;DataCollectors で xml ファイルを作成&quot;">​</a></h3><p>※ 依存する <code>coverlet.collector</code> ツールは既に xUnit 内にバインドされているので、手動でインストールする必要はない</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --collect:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;XPlat Code Coverage&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令実行後、現ディレクトリに TestResults ディレクトリを生成し、中に coverage.cobertura.xml ファイルを生成する</p><h3 id="reportgenerator-で-xml-ファイルに基づいた報告を生成" tabindex="-1">ReportGenerator で xml ファイルに基づいた報告を生成 <a class="header-anchor" href="#reportgenerator-で-xml-ファイルに基づいた報告を生成" aria-label="Permalink to &quot;ReportGenerator で xml ファイルに基づいた報告を生成&quot;">​</a></h3><h4 id="net-内の-nuget-ツールで-reportgenerator-パッケージをインストール" tabindex="-1">.NET 内の NuGet ツールで ReportGenerator パッケージをインストール <a class="header-anchor" href="#net-内の-nuget-ツールで-reportgenerator-パッケージをインストール" aria-label="Permalink to &quot;.NET 内の NuGet ツールで ReportGenerator パッケージをインストール&quot;">​</a></h4><ul><li><code>dotnet tool</code> コマンド公式: <a href="https://docs.microsoft.com/ja/dotnet/core/tools/dotnet-tool-install" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/tools/dotnet-tool-install</a></li><li>チュートリアル: .NET CLI を使って .NET ローカル ツールをインストールして使用する：<a href="https://docs.microsoft.com/ja/dotnet/core/tools/local-tools-how-to-use" target="_blank" rel="noreferrer">https://docs.microsoft.com/ja/dotnet/core/tools/local-tools-how-to-use</a></li></ul><p>※ グローバルでのインストールは比較的に簡単で、そうしたい人は ReportGenerator の公式倉庫 <a href="https://github.com/danielpalme/ReportGenerator#install-the-package-matching-your-platform-and-needs" target="_blank" rel="noreferrer">Getting started</a> をご自分で参照してください</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dotnet ローカル（現ディレクトリ）ツールリストファイルを作成</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool-manifest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ローカル下で ReportGenerator をインストール</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># その後は現ディレクトリで .config ディレクトリ及び dotnet-tools.json ファイルを生成する</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dotnet-reportgenerator-globaltool</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ローカルにパッケージをインストール</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;Command&gt; は \`gotnet tool list\` 又は .config/dotnet-tools.json で確認できる</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Comman</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="報告を作成" tabindex="-1">報告を作成 <a class="header-anchor" href="#報告を作成" aria-label="Permalink to &quot;報告を作成&quot;">​</a></h4><p>※ ディレクトリは自分で定義できる</p><ol><li><p><code>./TestResults/&lt;Hash&gt;/</code> 内の coverage.cobertura.xml ファイルを <code>./TestResults</code> に入れる</p></li><li><p>ReportGenerator を実行する</p><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># グローバルにインストールした場合は命令の前に \`dotnet tool run\` を付ける必要はない</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dotnet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reportgenerator</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-reports:&quot;./TestResults/coverage.cobertura.xml&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-targetdir:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;./TestResults/coveragereport&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-reporttypes:Html</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>coveragereport/index.html を開いて報告を確認する</p></li></ol>`,37),l=[t];function p(r,h,o,k,d,c){return i(),a("div",null,l)}const b=s(e,[["render",p]]);export{u as __pageData,b as default};
