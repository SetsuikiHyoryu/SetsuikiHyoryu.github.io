import{_ as e,c as l,o as i,a3 as a}from"./chunks/framework.Cbi_dvob.js";const _=JSON.parse('{"title":"Neovim 帮助文档细节","description":"","frontmatter":{},"headers":[],"relativePath":"zh/programming/coding-memo/neovim/neovim-help-document-detail.md","filePath":"zh/programming/coding-memo/neovim/neovim-help-document-detail.md","lastUpdated":1729375819000}'),t={name:"zh/programming/coding-memo/neovim/neovim-help-document-detail.md"},o=a('<h1 id="neovim-帮助文档细节" tabindex="-1">Neovim 帮助文档细节 <a class="header-anchor" href="#neovim-帮助文档细节" aria-label="Permalink to &quot;Neovim 帮助文档细节&quot;">​</a></h1><h2 id="help" tabindex="-1"><code>help</code> <a class="header-anchor" href="#help" aria-label="Permalink to &quot;`help`&quot;">​</a></h2><ul><li>在输入 <code>help word</code> 的过程中按 CTRL-D 可以查看匹配 word 的所有入口。</li></ul><h2 id="help-quotex" tabindex="-1"><code>help [quotex]</code> <a class="header-anchor" href="#help-quotex" aria-label="Permalink to &quot;`help [quotex]`&quot;">​</a></h2><ul><li>大小写使用相同的寄存器。</li><li>小写时替换之前的内容。</li><li>大写时在之前的内容后拼接。</li><li>不指定时会储存到未命名的寄存器（默认的临时文本寄存器）中。</li></ul><h2 id="user-manual" tabindex="-1">User Manual <a class="header-anchor" href="#user-manual" aria-label="Permalink to &quot;User Manual&quot;">​</a></h2><h3 id="usr-02-txt" tabindex="-1">usr_02.txt <a class="header-anchor" href="#usr-02-txt" aria-label="Permalink to &quot;usr_02.txt&quot;">​</a></h3><ul><li>U: 相较于 CTRL-R 的区别是 U 为行内而 CTRL-R 为全局。</li></ul><h3 id="usr-03-txt" tabindex="-1">usr_03.txt <a class="header-anchor" href="#usr-03-txt" aria-label="Permalink to &quot;usr_03.txt&quot;">​</a></h3><ul><li>`` / &#39;&#39;: 跳回最后一次跳转前的位置。</li><li><code>:jumps</code>: 打开跳转位置列表。</li><li>特殊 marks: <ul><li>&#39; The cursor position before doing a jump</li><li>&quot; The cursor position when last editing the file</li><li>[ Start of the last change</li><li>] End of the last change</li></ul></li></ul><h3 id="usr-04-txt" tabindex="-1">usr_04.txt <a class="header-anchor" href="#usr-04-txt" aria-label="Permalink to &quot;usr_04.txt&quot;">​</a></h3><ul><li>dw 不会删除下一个单词的开始，这叫 exclusive，与之相对的叫 inclusive。</li><li>c 和 d 的 inclusive / exclusive 基本一致，但 cw 不会删除下一个单词前的空格，而 dw 会。这是 vi 历史原因。</li><li><code>&quot;*</code> 也是剪贴板寄存器。</li><li>daw 会删除单词之后的空格（如果在行末则是单词前的空格）。</li><li>dis 删除一句话（sentence），dip 删除一个段落（paragraph）。<code>help text-objects</code>。</li><li>a 会删除空格，所以更适合纯删除；i 不会删除空格，所以更适合删完后修改。</li><li><code>r&lt;Enter&gt;</code> 是用换行符替换文字。</li><li>3d2w 表示删除两个单词，执行三次。</li></ul><h3 id="usr-07-txt" tabindex="-1">usr_07.txt <a class="header-anchor" href="#usr-07-txt" aria-label="Permalink to &quot;usr_07.txt&quot;">​</a></h3><ul><li>CTRL-^: 在两个文件中跳转。</li><li>`&quot;: 回到上个文件的最后光标处（没试成功）。</li><li>`.: 回到上个文件最后修改处（没试成功）。</li><li>mX: 小写字母为单文件 local 标记，大写字母为多文件间 global 标记。</li><li><code>:write &gt;&gt; file</code>: 将当前文件（或选中区域）以 append 的方式写入指定文件。</li><li><code>:saveas file</code>: 将当前缓冲区保存为新文件并打开它。</li><li><code>:file file</code>: 修改当前缓冲区文件名。</li></ul>',14),r=[o];function d(n,s,u,c,h,m){return i(),l("div",null,r)}const x=e(t,[["render",d]]);export{_ as __pageData,x as default};
